//payon,166,217,3	script	Claim Event	4_F_KAFRA1,{
//getcharid(2) == .@guildid;
//mes "GUILD ID : "+.@guildid+"";
//close;
//}

// ========================================================
// Author: Dazzu
// ========================================================
// Script: Guild Package NPC
// ========================================================
// Version: 1.2
// ========================================================
//	Description:
//	Script that allows a Guild and her guild members to receive a predetermined package using a code.
//	Package code is generated by an authorized GM through the GM Menu, which is then communicated to the registering guild master.
//	Both guild master and his/her members will receive the same package content.
//	Supplied equipment is Account Bounded.
//	Code-based claim allows for situations such as old guilds under 'new management' to claim a package, given all members have not already made a previous claim.
// ========================================================
//	Features:
//	- GM menu to generate and view codes.
//	- Utilizes Gepard's unique id system to check for repeats and multi-logging
//	- Ability to toggle between IP and gepard unique id
//	- SQL-based recording and checks
//	- Allows customized package (set in .package and .packwgt arrays for the item id and item amount respectively)
//	- Performs multiple (some toggleable) checks and cancels claim if one of those claims fail:
//		> Weight limit check
//		> Repeat claim per unique IP		[Optional]
//		> Multi-client claim 				[Optional]
//		> All members online requirement	[Optional]
// ========================================================
// Changelog:
//	- Added gepard toggle variable under OnInit [.useGepard]
//	- Modified code that will now allow toggle between gepard and ip address checks
//	- Commented code blocks that performs a unique id call and replace with ip call as a default
//		> However, instructions are provided within the code that allows enabling of unique id calls
//		> Gepard-related modifications are located in lines 370, 426, and 485.
// ========================================================
//	Requirement(s):
//	- GepardShield if using gepard (unique id) functionalities
// ========================================================
//	Additional Notes:
//	- Please report bugs to Dazzu#7449 on Discord
//	- IMPORTANT: toggling between gepard and ip checks after some use may have the following effects:
//		> Players with previous claim might be able to perform a reclaim (IP to Gepard toggle)
//		> Players with NO previous claim might NOT be able to perform a claim if multiple people are on the same IP (eg. household, internet cafe) (Gepard to IP toggle)
// ========================================================

guildhall,100,100,3	script	Guild Claim Package	10299,{
	function check_guild_mult;
	function check_guild_online;
	function check_guild_claim;
	function check_guild_weight;
	function supply_package;
	
	if(getgmlevel() >= .minGMLevel)
		goto G_GM;
	else
		goto G_PL;
	
	/******************************************************************
	*	Player Menu
	******************************************************************/
	G_PL_PRE:
		next;
	//Main player menu
	G_PL:
		if(getguildmaster(getcharid(2)) != strcharinfo(0)){
			mes .main$,
				"Only guild masters may claim the package!";
			close;
		}
		
		mes .main$,
			"Greetings, "+strcharinfo(0)+". Guild master of the "+strcharinfo(2)+" guild!",
			"Would you like to claim the guild package for you and your comrades?";
			switch(select("Yes:Information:No")){
				case 1:
					goto G_PL_CLAIM;
					break;
				case 2:
					goto G_PL_INFO;
					break;
				default:
					next;
					mes .main$,
						"Have a good day.";
					close;
			}
	end;
	
	//Guild Package information
	G_PL_INFO:
		next;
		mes .main$,
			"Guilds who have not registered to claim the guild package may do so through contacting a Game Master.",
			"You will then be provided with a code that will let you claim the package for you and your guild members.",
			"Game Masters wil also perform a manual guild member check to ensure that all members are not using multiple clients.";
	G_PL_INFO2:
		next;
		mes .main$,
			"Note that you will not be able to claim the package if any one of your members have claimed it previously.",
			"PLEASE CAREFULLY READ THE FOLLOWING ADDITIONAL INFORMATION IN ORDER TO AVOID ANY ISSUES WHILE CLAIMING THE PACKAGE.";
		next;
		mes .main$,
			"> YOU MUST HAVE A MINIMUM OF "+.minMembers+" MEMBER"+(.minMembers>1?"S":"")+" TO BE ELIGIBLE FOR A CLAIM.";
		next;
		if(.disableRepeatClaim){
			mes .main$,
				"> EACH MEMBER MAY ONLY CLAIM THE PACKAGE ONCE.",
				"> IF ANY MEMBER HAS CLAIMED IT BEFORE WHILST IN ANOTHER GUILD PREVIOUSLY, YOU WILL NOT BE ABLE TO CLAIM THE PACKAGE.";
			next;
		}
		if(.disableMultiLogging){
			mes .main$,
				"> MULTI LOGGING IS NOT ALLOWED.",
				"> YOU WILL NOT BE ABLE TO CLAIM THE PACKAGE IF A MEMBER IS CONTROLLING MORE THAN 1 GUILD MEMBERS.";
			next;
		}
		if(.allMembersOnline){
			mes .main$,
				"> ALL MEMBERS MUST BE ONLINE WHILE CLAIMING THE PACKAGE.",
				"> THERE WILL BE NO DO-OVERS IF ANYONE DISCONNECTS AT THE SAME TIME THE PACKAGE IS SUPPLIED.";
			next;
		}
		mes .main$,
			"> PLEASE ENSURE THAT EACH MEMBER HAS ENOUGH INVENTORY SPACE TO STORE THE PACKAGE.",
			"> THERE WILL BE NO DO-OVERS IF ANYONE DID NOT RECEIVE, OR EVEN PARTIALLY RECEIVE THE ITEMS.";
		next;
		mes .main$,
			"Now that that's out of the way,",
			"Both the guild master and his/her members will receive the following items:";
		for(.@i=0; .@i<getarraysize(.package); .@i++){
			mes "> "+.packwgt[.@i]+" "+getitemname(.package[.@i]);
			if(.@i>0 && .@i%7==0 && .@i<(getarraysize(.package)-1))
				next;
		}
		next;
		if(.@ready){
			.@ready = 0;
			goto G_PL_CLAIM2;
		}
		else
			goto G_PL;
	end;
	
	//Package claim label
	G_PL_CLAIM:
		next;
		getguildmember getcharid(2);
		if($@guildmembercount<.minMembers){
			mes .main$,
				"You are not permitted to claim a package since you do not meet the member requirement.",
				"Please ensure you have a minimum of "+.minMembers+" member"+(.minMembers>1?"s":"")+".";
			next;
			goto G_PL;
		}
		mes .main$,
			"Please provide the secret code:";
		input .@code$;
		.@code$ = escape_sql(.@code$);		
		.@valid = query_sql("SELECT `status`, `guild_id` FROM `gpack_code` WHERE `gcode` = '"+.@code$+"' LIMIT 1",.@status,.@guild);
		if(.@valid<=0 || strcharinfo(2)!=getguildname(.@guild)){
			next;
			mes .main$,
				"The code you have provided is invalid.",
				"Codes are case-sensitive. Please ensure you have accurately typed the code.",
				"If the issue persists, please contact a Game Master.";
			next;
			goto G_PL;
		}
		if(.@status){
			next;
			mes .main$,
				"The code you have provided has already been used.",
				"Please contact a Game Master if you believe your guild has not used this code yet.";
			next;
			goto G_PL;
		}
		next;
		.@ready = 1;
		mes .main$,
			"The code you have provided is valid.",
			"You are now ready to claim the guild package.";
		goto G_PL_INFO2;
	G_PL_CLAIM2:
		next;
		mes .main$,
			"Before I ask if you would like to claim the package, please allow me to provide you a checklist to ensure that you and your guild members are ready.",
			"If you answer no to any one of these questions, I will throw you back to the main menu.";
		next;
		mes .main$,
			"Are ALL of your guild members online?";
		if(select("No:Yes")==1){
			goto G_PL_WRONG;
		}
		next;
		mes .main$,
			"Have you asked and checked if ALL of your guild members have provided enough inventory space?";
		if(select("No:Yes")==1){
			goto G_PL_WRONG;
		}
		next;
		mes .main$,
			"Have you ensured that ALL of your guild members have not previously claimed the package from a different guild OR a different account?";
		if(select("No:Yes")==1){
			goto G_PL_WRONG;
		}
		next;
		mes .main$,
			"Great! Now you're ready to claim the package.";
		next;
		mes .main$,
			"Would you like to claim the package?";
		if(select("Yes:No")==2){
			next;
			goto G_PL;
		}
		next;
		//Checks for guild member login status
		//Can be toggled by setting the .allMembersOnline variable in OnInit label
		if(.allMembersOnline){
			.@onstatus = check_guild_online(getcharid(2));
			if(!.@onstatus){
				mes .main$,
					"A guild member is offline. Please ensure all  guild members are online before claiming the package.";
				close;
			}
		}
		//Checks for unique id on all members
		//Can be toggled by setting the .disableMultiLogging variable in OnInit label
		if(.disableMultiLogging){
			.@result$ = check_guild_mult(getcharid(2));
			if(.@result$ != ""){
				explode (.@duplicates$, .@result$, ":");
				mes .main$,
					"Unable to proceed with claim. The following guild members are a part of a multi-client system:";
				for(.@i=0; .@i<getarraysize(.@duplicates$); .@i++){
					mes "> "+.@duplicates$[.@i];
				}
				next;
				mes .main$,
					"Please ensure that no member is multi-logging.";
				close;
			}
		}
		//Checks for previous claim entry
		//Can be toggled by setting the .disableRepeatClaim variable in OnInit label
		if(.disableRepeatClaim){
			.@claims$ = check_guild_claim(getcharid(2));
			if(.@claims$ != ""){
				explode (.@duplicates$, .@claims$, ":");
				mes .main$,
					"Unable to proceed with claim. The following guild members have made a previous claim:";
				for(.@i = 0; .@i<getarraysize(.@duplicates$); .@i++){
					mes "> "+.@duplicates$[.@i];
				}
				close;
			}
		}
		//Checks each member for weight limit
		.@weight$ = check_guild_weight(getcharid(2));
		if(.@weight$ != ""){
			explode (.@owchars$, .@weight$, ":");
			mes .main$,
				"Unable to proceed with claim. The following guild members will not be able to carry the package:";
			for(.@i = 0; .@i<getarraysize(.@owchars$); .@i++){
				mes "> ^FF0000"+.@owchars$[.@i]+"^000000";
			}
			close;
		}
		//At this point, all guild members are online and have passed the checks.
		supply_package(getcharid(2),.@code$);
		announce "The guild [ "+strcharinfo(2)+" ] is now a recognized guild.",BC_ALL,0xfcbe03;
		next;
		mes .main$,
			"Package has been successfully distributed.";
		close;
		
	end;
	
	G_PL_WRONG:
		next;
		goto G_PL;
	end;
	
	
	/******************************************************************
	*	GM Menu
	******************************************************************/

	G_GM:
		mes .name$,
			"Select a process:";
		menu "> Player Menu",G_PL_PRE,"> View Codes",G_VC,"> Generate Code",G_GC;
	end;
	
	G_VC:	// Display all generated codes and claim status
		next;
		mes .name$,
			"Displaying guild pack code in chat window.";
		query_sql("SELECT * FROM `gpack_code` ORDER BY `status` ASC",.@guilds,.@codes$,.@status);
		dispbottom "Guild    |          Code          |    Status";
		for(.@i=0; .@i<getarraysize(.@guilds); .@i++){
			dispbottom getguildname(.@guilds[.@i])+"     "+.@codes$[.@i]+"         "+(.@status[.@i]==0?"Unclaimed":"Claimed");
		}
		next;
		goto G_GM;		
	end;
	
	G_GC:	//Generate Code	
		next;
		mes .name$,
			"Input guild name:";
		input .@guild$;
		.@guild$ = escape_sql(.@guild$);
		.@found = query_sql("SELECT `guild_id` FROM `guild` WHERE `name` = '"+.@guild$+"' LIMIT 1",.@gid);
		if(.@found< 1){
			next;
			mes .name$,
				"Guild not found.",
				"Please ensure the name is correctly typed.",
				"Returning to GM Menu.";
		}
		else{
			.@code$ = "";
			.@cpl = getstrlen(.codePattern$);
			for(.@i=0; .@i<.codeLength; .@i++){
				.@code$ += charat(.codePattern$,rand(.@cpl));
			}
			query_sql "INSERT INTO `gpack_code` (`guild_id`, `gcode`, `status`) VALUES ('"+.@gid+"', '"+.@code$+"', '0')";
			next;
			mes .name$,
				"Code generated for "+getguildname(.@gid)+".";
		}
		next;
		goto G_GM;
	end;
	
	/******************************************************************************************************
	*	SET/TOGGLE VALUES HERE
	*******************************************************************************************************/
	OnInit:
		.name$ = "[ Control Panel ]";
		.main$ = "[ Guild Master ]";
		.codePattern$ = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
		.disableMultiLogging = true;
		.disableRepeatClaim = true;
		.allMembersOnline = true;
		.codeLength = 10;
		.minMembers = 1;
		.minGMLevel = 99;
		.useGepard = true;			// Only used if Gepard Shield is enabled on the server AND the necessary modifications are made within the script. (Please refer to the changelogs on the top of this script on how to enable this feature)
		setarray .package[0],		// Array of the package's item IDs
		3101,12411,12412,25009,25010,25011,25012;
		setarray .packwgt[0],		// Number of items to be dispensed for entries that corresponds to .package array indices
		1,5,5,2,2,2,2;
		waitingroom "Claim Guild Package",0;
		
		query_sql "CREATE TABLE IF NOT EXISTS `guild_package` ( `acc_id` INT NOT NULL UNIQUE, `char_id` INT NOT NULL, `char_name` TEXT NOT NULL, `guild_id` INT NOT NULL, `guild_name` TEXT NOT NULL, `guild_master` TEXT NOT NULL, `claim_ip` TEXT NOT NULL, `claim_mac` TEXT NOT NULL, `claim_cpu` TEXT NOT NULL, `claim_motherboard` TEXT NOT NULL ) ENGINE=MyISAM";
		query_sql "CREATE TABLE IF NOT EXISTS `gpack_code` (`guild_id` INT NOT NULL, `gcode` VARCHAR(10) NOT NULL, `status` INT NOT NULL ) ENGINE=MyISAM";
	end;
	
	/**
	*	Checks for reocurring unique ID within a guild
	*	Returns string containing a delimited list of character names with the same unique_id/ip address
	**/
	function	check_guild_mult	{
		.@gid = getarg(0);				//Guild ID
		.@gm$ = getguildmaster(.@gid);
		.@gmid = getcharid(3,.@gm$);	//Use to reattach to script
		getguildmember .@gid,0;
		getguildmember .@gid,1;
		getguildmember .@gid,2;
		.@dups = "";
		for(.@i=0; .@i<$@guildmembercount; .@i++){
			if(isloggedin($@guildmemberaid[.@i],$@guildmembercid[.@i])){
				attachrid($@guildmemberaid[.@i]);
				// GEPARD MODIFICATION SECTION =========================================================================
				//
				.@uid$ = (.useGepard?get_unique_id():getcharip());		//Uncomment if Gepard Shield is implemented
				//.@uid$ = getcharip();										//Comment if Gepard Shield is implemented
				//
				// =====================================================================================================
				if(inarray(.@guild_unique$[0],.@uid$)>=0){
					.@dups$ += $@guildmembername$[inarray(.@guild_unique$[0],.@uid$)];
					if(.@dups$ != ""){
						.@dups$ += ":";
					}
					.@dups$ += $@guildmembername$[.@i];
				}
				.@guild_unique$[getarraysize(.@guild_unique$)] = .@uid$;
			}
		}
		attachrid(.@gmid);
		return .@dups$;
	}
	
	/**
	*	Checks log status of all members in a guild.
	*	Returns 0 if at least one member is offline, return 1 otherwise.
	**/
	function check_guild_online	{
		.@gid = getarg(0);				//Guild ID
		getguildmember .@gid,1;			//char id
		getguildmember .@gid,2;			//acc id
		.@status = 1;
		for(.@i=0; .@i<$@guildmembercount; .@i++){
			if(!isloggedin($@guildmemberaid[.@i],$@guildmembercid[.@i])){
				.@status = 0;
				break;
			}
		}
		return .@status;
	}
	
	/**
	*	Checks database for previous member claims
	*	Returns a string of characters that have already made a previous claim. Empty string if no members made a previous claim.
	**/
	function check_guild_claim	{
		.@gid = getarg(0);				//Guild ID
		.@gm$ = getguildmaster(.@gid);
		.@gmid = getcharid(3,.@gm$);	//RID of Guild Master to reattach the script to	
		getguildmember .@gid,2;			//acc id
		
		.@query$ = "SELECT `char_name` FROM `guild_package` WHERE ";
		.@cond$ = "";
		for(.@i=0;.@i<$@guildmembercount; .@i++){
			attachrid($@guildmemberaid[.@i]);
			if(.@cond$ != "")
				.@cond$ += " OR ";				
			.@cond$ += "`acc_id` = '" + $@guildmemberaid[.@i]+"'";
			
			// GEPARD MODIFICATION SECTION ================================
			// Uncomment the below 3 lines (Lines 427 - 429) if Gepard Shield is implemented
			if(.useGepard)
				.@cond$ += " OR `claim_mac` = '" + get_unique_id()+"'";
			//else
			// ============================================================
			//	.@cond$ += " OR `claim_ip` = '"+ getcharip()+"'";
		}
		attachrid(.@gmid);
		.@query$ += .@cond$;
		.@count = query_sql(.@query$,.@entries$);
		if(.@count>0){	// There are members that have a previous claim
			.@impl$ = implode(.@entries$,":");
		}
		return .@impl$;
	}
	
	/**
	*	Checks the total weight limit of the package against each guild member.
	*	Returns a string of characters that fails the weight check. Empty string is all members pass.
	**/
	function check_guild_weight	{
		.@gid = getarg(0);					//Guild ID
		.@gm$ = getguildmaster(.@gid);
		.@gmid = getcharid(3,.@gm$);		//RID of Guild Master to reattach the script to	
		.@char$ = "";
		
		getguildmember(.@gid,2);			//Fetch array of guild members account ids
		for(.@i = 0; .@i<$@guildmembercount; .@i++){
			attachrid($@guildmemberaid[.@i]);
			if(!checkweight2(.package,.packwgt)){
				if(.@char$ != "")
					.@char$ += ":";
				.@char$ += strcharinfo(0);
			}
		}
		attachrid(.@gmid);		
		return .@char$;
	}
	
	/**
	*	Supplies the package to each guild member.
	*	Updates guild_package and gpack_code table with necessary information.
	*	Does not return a value.
	**/
	function supply_package{
		.@gid = getarg(0);					//Guild ID
		.@code$ = getarg(1);				//Package Code
		.@gm$ = getguildmaster(.@gid);		//GM name
		.@gname$ = getguildname(.@gid);		//Guild Name
		.@gmid = getcharid(3,.@gm$);		//RID of Guild Master to reattach the script to	
		.@code$ = escape_sql(.@code$);
		query_sql("UPDATE `gpack_code` SET `status` = '1' WHERE `gcode` = '"+.@code$+"'");
		addrid(3,0,.@gid);
		for(.@i = 0; .@i<getarraysize(.package); .@i++){
			getitembound .package[.@i],.packwgt[.@i],Bound_Account;
		}
		query_sql("INSERT INTO `guild_package` VALUES ('"+getcharid(3)+"','"+getcharid(0)+"','"+escape_sql(strcharinfo(0))+"','"
		+getcharid(2)+"','"+escape_sql(getguildname(getcharid(2)))+"','"+escape_sql(getguildmaster(getcharid(2)))+"','"
		// GEPARD MODIFICATION SECTION ================================================
		//
		 +getcharip()+"','"+(.useGepard?get_unique_id():"")+"','','')");		//Uncomment if Gepard Shield is implemented
		//+getcharip()+"','','','')");											//Comment if Gepard Shield is implemented
		//
		// ============================================================================
		attachrid(.@gmid);
		return;
	}
}